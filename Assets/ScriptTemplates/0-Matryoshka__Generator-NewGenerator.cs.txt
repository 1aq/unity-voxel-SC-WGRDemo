using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using XNode;

namespace Matryoshka.Generators
{
    // Generators with planting abailities.
    public class #SCRIPTNAME#Instance : PlanterNodeInstance
    {
        // HERE: Declear variables for actual calculation
        // e.g. public float ratio;

        public override void Voxelize(World world)
        {
			// HERE: Fill the world with your data
            // Use world.SetBlock(), etc.
            // Beaware of the Bounds of the root node, which can be set in the NodeGraph Editor.
            // NO modifications outside the bound.
        }

        public override void Build(World world)
        {
            // HERE: Modify to add meaningful seed to seeds
            seeds.Add(NewSeed(Vector3.zero, Quaternion.identity, origin.power, 0));
        }
    }

    public class #SCRIPTNAME#UnderNode : GeneratorUnderNode
    {
        // HERE: Declear variables for batched store
        // e.g. public Func<float> ratio;

        // Init the UnderNode if needed
        public override void Init()
        {
            base.Init();
		}

        // This creates the actual Instance, i.e. calculation agent.
        public override NodeInstance NewInstance(Seed seed, World world)
        {
            var inst = new #SCRIPTNAME#Instance();

            // HERE: Assign attributes to your instance
            // e.g. inst.ratio = ratio();

            return inst;
        }
    }

    public class #SCRIPTNAME# : BatchedPlanterNode
    {
        // HERE: Declear variables for node graph
        // e.g. [Input] public RoadMap<float> ratio = new C<float>(5.0f);

        // Use this for initialization
        protected override void Init() 
        {
            base.Init();
        }

        // Return the correct value of an output port when requested
        public override object GetValue(NodePort port)
        {
            object v = base.GetValue(port);

            // HERE: Modify if you have additional output ports

            return v;
        }

        // Build() is called when the graph need to populate a "Underlying graph" for actual generation.
        // This should return a UnderNode which can do (batched) calculation.
        public override AbsUnderNode Build()
        {
            #SCRIPTNAME#UnderNode n = base.Build() as #SCRIPTNAME#UnderNode;

            // HERE: Retrieve values from the node graph\
            // e.g. n.ratio = GetInputValue("ratio", ratio).realized;

            return n;
        }

        protected override AbsUnderNode NewUndernode()
        {
            return new #SCRIPTNAME#UnderNode();
        }
    }
}